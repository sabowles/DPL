def max(x, y)
{
  if(x > y)
  {
    x
  }
  else
  {
    y
  }
}

def height(arr)
{
  if(arr ? "")
  {
    0
  }
  else
  {
    call arrayLookup(arr, 4)
  }
}

def getBalanceFactor(arr)
{
  if(arr ? "")
  {
    0
  }
  else
  {
    call height(call arrayLookup(arr, 2)) - call height(call arrayLookup(arr, 3))
  }
}

def rotateRight(n)
{
  var x = call arrayLookup(n, 2)
  var x2 = call arrayLookup(x, 3)
  call arrayInsert(n, 2, x2)
  call arrayInsert(x, 3, n)
  call arrayInsert(n, 4, call max(call height(x2), call height(call arrayLookup(n, 3))))
  call arrayInsert(x, 4, call max(call height(call arrayLookup(x, 2)), call height(call arrayLookup(x, 3))))
  x
}

def rotateLeft(n)
{
  var x = call arrayLookup(n, 3)
  var x2 = call arrayLookup(x, 2)
  call arrayInsert(n, 3, x2)
  call arrayInsert(x, 2, n)
  call arrayInsert(n, 4, call max(call height(x2), call height(call arrayLookup(n, 3))))
  call arrayInsert(x, 4, call max(call height(call arrayLookup(x, 2)), call height(call arrayLookup(x, 3))))
  x
}

def insert(arr, key, val)
{
  var r = ""
  if(arr ? "")
  {
    var n = call createArray(5)
    call arrayInsert(n, 0, key)
    call arrayInsert(n, 1, val)
    call arrayInsert(n, 2, "")
    call arrayInsert(n, 3, "")
    call arrayInsert(n, 4, 1)
    r = n
  }
  else
  {
    if(r ? "")
    {
      if(call arrayLookup(arr, 0) < key)
      {
        call arrayInsert(arr, 2, call insert(call arrayLookup(arr, 2), key, val))
      }
      else
      {
        if(key > call arrayLookup(arr, 0))
        {
          call arrayInsert(arr, 3, call insert(call arrayLookup(arr, 3), key, val))
        }
        else
        {
          r = call arrayInsert(arr, 1, val)
        }
      }
    }
    if(r ? "")
    {
      var bal = call getBalanceFactor(arr)
      if(bal > 1 & key < call arrayLookup(call arrayLookup(arr, 2), 0))
      {
        r = call rotateRight(arr)
      }
      else
      {
        if(bal < -1 & key > call arrayLookup(call arrayLookup(arr, 3), 0))
        {
          r = call rotateLeft(arr)
        }
        else
        {
          if(bal > 1 & key > call arrayLookup(call arrayLookup(arr, 2), 0))
          {
            call insertArray(arr, 2, call rotateLeft(call arrayLokup(arr, 2)))
            r = call rotateRight(arr)
          }
          else
          {
            if(bal < -1 & key < call arrayLookup(call arrayLookup(arr, 3), 0))
            {
              call insertArray(arr, 3, call rotateLeft(call arrayLokup(arr, 3)))
              r = call rotateLeft(arr)
            }
            else
            {
              r = arr
            }
          }
        }
      }
    } 
  }
  r
}
  
def lookup(arr, key)
{
  if(call arrayLookup(arr, 0) ? key)
  {
    call arrayLookup(arr, 1)
  }
  else
  {
    if(call arrayLookup(arr, 0) < key)
    {
      call lookup(call arrayLookup(arr, 2), key)
    }
    else
    {
      call lookup(call arrayLookup(arr, 3), key)
    }
  }
}

def main()
{
  var x = 20
  var i = 0
  var a = ""
  while(i < x)
  {
    a = call insert(a, i, i)
    i = i + 1
  }
  i = 0
  var t = 0
  while(i < x)
  {
    t = t + call lookup(a, i)
    i = i + 2
  }
  call println(call lookup(a, 3))
  t
}

call println(call main())
    
