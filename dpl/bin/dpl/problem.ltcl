def strcar(str)
{
	call arrayLookup(str, 0)
}

def strcdr(str)
{
	call call arrayLookup(str, 1) ()
}

def strcons(car, cdr)
{
	var a = call createArray(2)
	call arrayInsert(a, 0, car)
	call arrayInsert(a, 1, cdr)
	a
}

def indivisible(a, b)
{
	var x = 0 < a % b
	var y = 0 > a % b
	x ; y
}

def strfilter(pred, str)
{
	if(call pred(call strcar(str)))
	{
		call strcons(call strcar(str), #(){call strfilter(pred, call strcdr(str))})
	}
	else
	{
		call strfilter(pred, call strcdr(str))
	}
}

def sieve(str)
{
	call strcons(call strcar(str), #(){call sieve(call strfilter(#(x){call indivisible(x, call strcar(str))}, call strcdr(str)))})
}

def intFromN(n)
{
	call strcons(n, #(){call intFromN(n + 1)})
}

def strref(str, n)
{
	if(n ? 0)
	{
		call strcar(str)
	}
	else
	{
		call strref(call strcdr(str), n - 1)
	}
}

def main()
{
	var primes = call sieve(call intFromN(2))
	call strref(primes, 50)
}

call println(call main())
 